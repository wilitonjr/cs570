/*
* Wiliton Abreu Rodrigues                                  
* Edoras - cssc2301
* SDSU - CS570 (summer 2020)
* REDid: 824508185
*/

#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>         // for fork
#include <sys/types.h>   // for pid_t
#include <sys/wait.h>     // for wait


int main() {

    pid_t child1_pid, child2_pid;
    
    (child1_pid = fork()) && (child2_pid = fork());    // Creates the two child processes

    if (child1_pid == 0) {    // Child 1 code

        printf ("CHILD <PID: %d> process is executing testalphabet program!\n",getpid());
        system ("./testalphabet");
        printf ("CHILD <PID: %d> process has done with testalphabet program! See the results above!\n",getpid());

    } else if (child2_pid == 0) {    // Child 2 code

        printf ("CHILD <PID: %d> process is executing testspecial program!\n",getpid());
        system ("./testspecial");
        printf ("CHILD <PID: %d> process has done with testspecial program! See the results above!\n",getpid());
    
    } else {    // Parent code
    
        // wait the two chiildren to terminate to make the prompt available     
        child1_pid = wait(NULL); 
        child2_pid = wait(NULL);  
//         printf("CT: child1 and child2 have terminated\n");
    }



    
	return 0;
	
}







/*
 This program will fork two child processes running the two programs generated in programming zero in parallel.
 Hint: You mant need to use fork(), exec() family, wait(), exit(), getpid() and etc ...
 
 Requirements:
 
 1) Exactly two child processes are created, one to run testspecial program and the other is to run testalphabet program;
 2) When a program starts to run, print a message to the output screen showing which process (with PID) is running which program, for example:
    "CHILD <16741> process is executing testalphabet program!"
    
 3) When a program is done, the process exits and at the same time, a message should be print to the output screen showing which  process (with PID) is done with the program, for example:
    "CHILD <16741> process has done with testalphabet program !"
    
 4) The messages should match the real execution orders, i.e. when the testspecial program starts/ends, the right message should be print out. So you need to figure out how to get the starting/ending time of each 
 process.
   
   
 The expected screen print out should be similar as follows:
 
 CHILD <16741> process is executing testalphabet program!
 CHILD <16742> process is executing testspecial program!
, -> 745668
. -> 798072
... ...

CHILD <16742> process has done with testspecial program !
a -> 2861232
b -> 494472
... ...

CHILD <16741> process has done with testalphabet program !
 */
